#include<iostream>
#include<iomanip>
#include<stdio.h>
#include<TFile.h>
#include<TTree.h>
#include<TChain.h>
#include<TBranch.h>
#include<TMath.h>
#include<TH1F.h>
#include<TGraph.h>
#include<TLegend.h>
#include<TF1.h>
#include<TH2F.h>
#include<TApplication.h>
#include<TCanvas.h>
#include<TStyle.h>
#include<TSystem.h>
#include <fstream>

#define SIZE 2000

using namespace std;

int main(){
    
    TApplication *myapp=new TApplication("myapp",0,0);
    
    gStyle->SetLabelSize(0.045,"x");
    gStyle->SetLabelSize(0.045,"y");
    gStyle->SetTitleSize(0.05,"x");
    gStyle->SetTitleSize(0.05,"y");
    gStyle->SetOptFit(1);
    
    ULong64_t       nFThits;
    Double_t        x;
    Double_t        y;
    Double_t        z;
    Double_t        tx;
    Double_t        ty;
    Double_t        p;
    Double_t        pz;
    Double_t        qop;
    Float_t         HitZpos_0;
    Float_t         HitXpos_0;
    Float_t         HitYpos_0;
    Float_t         HitZpos[SIZE];
    Float_t         HitXpos[SIZE];
    Float_t         HitYpos[SIZE];
    Float_t         HitVeloZpos_0;
    Float_t         HitVeloXpos_0;
    Float_t         HitVeloYpos_0;
    Float_t         HitVeloZpos[SIZE];
    Float_t         HitVeloXpos[SIZE];
    Float_t         HitVeloYpos[SIZE];
    Float_t         HitUTZpos_0;
    Float_t         HitUTXpos_0;
    Float_t         HitUTYpos_0;
    Float_t         HitUTZpos[SIZE];
    Float_t         HitUTXpos[SIZE];
    Float_t         HitUTYpos[SIZE];
    Float_t         HitVeloUTZpos_0;
    Float_t         HitVeloUTXpos_0;
    Float_t         HitVeloUTYpos_0;
    Float_t         HitVeloUTZpos[SIZE];
    Float_t         HitVeloUTXpos[SIZE];
    Float_t         HitVeloUTYpos[SIZE];
    ULong64_t       eventNumber;
    
    
    
    
    
    TFile *f = new TFile("MCtracks_MagUp_bs2phiphi_1p5e34_nocuts_20ev.root");
    
    
    
    TDirectoryFile *dir = (TDirectoryFile*)f->Get("MCParticleNTuple");
    
    TTree *tt = (TTree*)dir->Get("Tracks");
    
    
    
    
    int nentries=tt->GetEntries();
    
    
    
    cout<<nentries<<endl;
    
    
    tt->SetBranchAddress("nFThits", &nFThits);
    tt->SetBranchAddress("x", &x);
    tt->SetBranchAddress("y", &y);
    tt->SetBranchAddress("z", &z);
    tt->SetBranchAddress("tx", &tx);
    tt->SetBranchAddress("ty", &ty);
    tt->SetBranchAddress("p", &p);
    tt->SetBranchAddress("pz", &pz);
    tt->SetBranchAddress("qop", &qop);
    tt->SetBranchAddress("HitZpos_0", &HitZpos_0);
    tt->SetBranchAddress("HitXpos_0", &HitXpos_0);
    tt->SetBranchAddress("HitYpos_0", &HitYpos_0);
    tt->SetBranchAddress("HitZpos", HitZpos);
    tt->SetBranchAddress("HitXpos", HitXpos);
    tt->SetBranchAddress("HitYpos", HitYpos);
    tt->SetBranchAddress("HitVeloZpos_0", &HitVeloZpos_0);
    tt->SetBranchAddress("HitVeloXpos_0", &HitVeloXpos_0);
    tt->SetBranchAddress("HitVeloYpos_0", &HitVeloYpos_0);
    tt->SetBranchAddress("HitVeloZpos", HitVeloZpos);
    tt->SetBranchAddress("HitVeloXpos", HitVeloXpos);
    tt->SetBranchAddress("HitVeloYpos", HitVeloYpos);
    tt->SetBranchAddress("HitUTZpos_0", &HitUTZpos_0);
    tt->SetBranchAddress("HitUTXpos_0", &HitUTXpos_0);
    tt->SetBranchAddress("HitUTYpos_0", &HitUTYpos_0);
    tt->SetBranchAddress("HitUTZpos", HitUTZpos);
    tt->SetBranchAddress("HitUTXpos", HitUTXpos);
    tt->SetBranchAddress("HitUTYpos", HitUTYpos);
    tt->SetBranchAddress("HitVeloUTZpos_0", &HitVeloUTZpos_0);
    tt->SetBranchAddress("HitVeloUTXpos_0", &HitVeloUTXpos_0);
    tt->SetBranchAddress("HitVeloUTYpos_0", &HitVeloUTYpos_0);
    tt->SetBranchAddress("HitVeloUTZpos", HitVeloUTZpos);
    tt->SetBranchAddress("HitVeloUTXpos", HitVeloUTXpos);
    tt->SetBranchAddress("HitVeloUTYpos", HitVeloUTYpos);
    tt->SetBranchAddress("eventNumber", &eventNumber);
    
   
    
    TH1F *momentum =new TH1F("momentum","",10000,0,1000000);
    TH1F *h_eta =new TH1F("h_eta","",1000,-10,10);

    
    double mm;
   
    
    for(int i=0; i<nentries; i++){
        
        tt->GetEntry(i);
        
        
        if (HitZpos_0 > 7700 && HitZpos_0 < 8100){
        mm = p;
        //if (mm !=0)
        momentum->Fill(mm);
            
            double eta = 0.5*TMath::Log((p+pz)/(p-pz));
            h_eta->Fill(eta);
        }
        
        
        
    }
    
    
    
    
    
    TCanvas *cc=new TCanvas("cc","",900,450);
    cc->Divide(2,1);
    cc->cd(1);
    
    momentum->SetTitle("momentum 1st T-station");
    momentum->SetXTitle("momentum [MeV/c]");
    
    momentum->DrawCopy("colz");
    
    cc->cd(2);
    h_eta->SetTitle("eta 1st T-station");
    h_eta->SetXTitle("eta [rad]");
    
    h_eta->DrawCopy("colz");
    
    
    myapp->Run(true);
    return 0;
	
}
